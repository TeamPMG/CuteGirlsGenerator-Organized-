{
  "converted_at": 1538994937,
  "kernel_source": "\n#include <metal_stdlib>\nusing namespace metal;\n\n#define OPTIMIZE 1\n\nkernel void reshape_16bccba9a464498806aabf37d42e7f652af6d3922196b61ef1ee5108(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint index[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float *x = (static_buffer + meta_buffer[0]);\n    device float *y = (static_buffer + meta_buffer[1]);\n\n    const int N = meta_buffer[2];\n\n    for (int gid = index; gid < N; gid += num_threads) {\n        y[gid] = x[gid];\n    }\n}\n\n\nkernel void scalarmul_06508dfebccaa0291fc078f8d1d11ce3713bec2f10ba8883385e007c(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    device float * v2 = (static_buffer + meta_buffer[1]);\n    const int D0 = meta_buffer[2];\n    int d0;\n    for (d0 = gid; d0 < D0; d0 += num_threads) {\n        const float v3 = v1[d0];\n        float v4;\n        {\n            const float value = *((device float *)(&meta_buffer[3]));\n            v4 = v3 * value;\n        }\n        v2[d0] = v4;\n    }\n}\n\n\nkernel void im2col_9b539f2f74232353e897aa9134c69cfa1ee49d2b6fa3daf025ab98c3(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint index[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float *im = (static_buffer + meta_buffer[0]);\n    device float *col = (static_buffer + meta_buffer[1]);\n\n    const int N = meta_buffer[2];\n    const int C1 = meta_buffer[3];\n    const int H1 = meta_buffer[4];\n    const int W1 = meta_buffer[5];\n    const int H2 = meta_buffer[6];\n    const int W2 = meta_buffer[7];\n    const int KH = meta_buffer[8];\n    const int KW = meta_buffer[9];\n    const int DH = meta_buffer[10];\n    const int DW = meta_buffer[11];\n    const int SH = meta_buffer[12];\n    const int SW = meta_buffer[13];\n    const int PH = meta_buffer[14];\n    const int PW = meta_buffer[15];\n\n    for (int gid = index; gid < N*H2*W2*KH*KW*C1; gid += num_threads) {\n        const int w2 = gid % W2;\n        const int h2 = gid / W2 % H2;\n        const int  n = gid / W2 / H2 % N;\n        const int c1 = gid / W2 / H2 / N % C1;\n        const int kw = gid / W2 / H2 / N / C1 % KW;\n        const int kh = gid / W2 / H2 / N / C1 / KW;\n\n        const int h1 = h2 * SH - PH + kh * DH;\n        const int w1 = w2 * SW - PW + kw * DW;\n\n        col[gid] = (h1 < 0 || h1 >= H1 || w1 < 0 || w1 >= W1) ? 0 : im[((n*H1+h1)*W1+w1)*C1+c1];\n    }\n}\n\n\nkernel void tensordot_8d766979cae5f29c01864384bf3bb8b079fcad4e7542a36c6fc3f956(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint index[[thread_index_in_threadgroup]],\n                          uint2 group_position[[threadgroup_position_in_grid]])\n{\n#define M_DIVIDABLE_BY_64 0\n#define N_DIVIDABLE_BY_64 1\n#define K_DIVIDABLE_BY_8 1\n\n#define A_STRIDE_K M\n#define A_STRIDE_M 1\n\n#define B_STRIDE_K N\n#define B_STRIDE_N 1\n\n#if K_DIVIDABLE_BY_8 && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64 && OPTIMIZE\n    const device float4 *load_target4 = (index & 32)\n        ? (const device float4 *)((static_buffer + meta_buffer[1]))\n        : (const device float4 *)((static_buffer + meta_buffer[0]));\n#else\n    const device float *load_target = (index & 32)\n        ? ((static_buffer + meta_buffer[1]))\n        : ((static_buffer + meta_buffer[0]));\n#endif\n\n    const int M = meta_buffer[3];\n    const int N = meta_buffer[4];\n\n    const int K = meta_buffer[5];\n\n    threadgroup float4 shared4[32 * 8 * 2];\n\n    const int stride_k = (index & 32) ? B_STRIDE_K : A_STRIDE_K;\n    const int stride_mn = (index & 32) ? B_STRIDE_N : A_STRIDE_M;\n\n    const int m_offset = index & 7;\n    const int n_offset = index >> 3;\n\n    const int mn_load_offset = ((index & 32) ? group_position.y : group_position.x) * 64 + (index & 15) * 4;\n    const int k_load_offset = ((index & 16) ? 1 : 0);\n\n    int track0 = mn_load_offset * stride_mn + (k_load_offset + 0) * stride_k;\n    int track2 = track0 + 2 * stride_k;\n    int track4 = track0 + 4 * stride_k;\n    int track6 = track0 + 6 * stride_k;\n\n#if !OPTIMIZE || !M_DIVIDABLE_BY_64 || !N_DIVIDABLE_BY_64\n    const int max_MN = (index & 32) ? N : M;\n#endif\n\n    int shared_offset4 = ((index & 32) ? 16 : 0) + k_load_offset * 32 + (index & 15);\n    int read_A_offset4 = m_offset * 2;\n    int read_B_offset4 = n_offset * 2 + 16;\n\n    float4 result[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n    int k = 0;\n\n    while (k < K)\n    {\n        {\n#if OPTIMIZE && K_DIVIDABLE_BY_8\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n        #if OPTIMIZE\n            shared4[shared_offset4 + 32 * 0] = load_target4[track0 >> 2];\n            shared4[shared_offset4 + 32 * 2] = load_target4[track2 >> 2];\n            shared4[shared_offset4 + 32 * 4] = load_target4[track4 >> 2];\n            shared4[shared_offset4 + 32 * 6] = load_target4[track6 >> 2];\n        #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                load_target[track0 + stride_mn * 0],\n                load_target[track0 + stride_mn * 1],\n                load_target[track0 + stride_mn * 2],\n                load_target[track0 + stride_mn * 3]\n            );\n            shared4[shared_offset4 + 32 * 2] = float4(\n                load_target[track2 + stride_mn * 0],\n                load_target[track2 + stride_mn * 1],\n                load_target[track2 + stride_mn * 2],\n                load_target[track2 + stride_mn * 3]\n            );\n            shared4[shared_offset4 + 32 * 4] = float4(\n                load_target[track4 + stride_mn * 0],\n                load_target[track4 + stride_mn * 1],\n                load_target[track4 + stride_mn * 2],\n                load_target[track4 + stride_mn * 3]\n            );\n            shared4[shared_offset4 + 32 * 6] = float4(\n                load_target[track6 + stride_mn * 0],\n                load_target[track6 + stride_mn * 1],\n                load_target[track6 + stride_mn * 2],\n                load_target[track6 + stride_mn * 3]\n            );\n        #endif\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            );\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            );\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            );\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            );\n    #endif\n\n            k += 8;\n#else\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 3]\n            );\n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 3]\n            );\n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 3]\n            );\n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 3]\n            );\n            k += 2;\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            );\n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            );\n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            );\n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            );\n            k += 2;\n    #endif\n#endif\n        }\n\n        threadgroup_barrier(mem_flags::mem_threadgroup);\n\n        {\n            for (int k_sub = 0; k_sub < 8; k_sub++)\n            {\n                float4 a00 = shared4[32 * k_sub + read_A_offset4 + 0];\n                float4 a01 = shared4[32 * k_sub + read_A_offset4 + 1];\n                float4 b00 = shared4[32 * k_sub + read_B_offset4 + 0];\n                float4 b01 = shared4[32 * k_sub + read_B_offset4 + 1];\n\n                result[4][0]  += b00[0] * a00[2];\n                result[4][1]  += b00[1] * a00[2];\n                result[0][1]  += b00[1] * a00[0];\n                result[0][0]  += b00[0] * a00[0];\n                result[6][0]  += b00[0] * a00[3];\n                result[6][1]  += b00[1] * a00[3];\n                result[2][1]  += b00[1] * a00[1];\n                result[2][0]  += b00[0] * a00[1];\n                result[12][0] += b00[0] * a01[2];\n                result[12][1] += b00[1] * a01[2];\n                result[8][1]  += b00[1] * a01[0];\n                result[8][0]  += b00[0] * a01[0];\n                result[14][0] += b00[0] * a01[3];\n                result[14][1] += b00[1] * a01[3];\n                result[10][1] += b00[1] * a01[1];\n                result[10][0] += b00[0] * a01[1];\n\n                result[14][2] += b00[2] * a01[3];\n                result[14][3] += b00[3] * a01[3];\n                result[10][3] += b00[3] * a01[1];\n                result[10][2] += b00[2] * a01[1];\n                result[12][2] += b00[2] * a01[2];\n                result[12][3] += b00[3] * a01[2];\n                result[8][3]  += b00[3] * a01[0];\n                result[8][2]  += b00[2] * a01[0];\n                result[6][2]  += b00[2] * a00[3];\n                result[6][3]  += b00[3] * a00[3];\n                result[2][3]  += b00[3] * a00[1];\n                result[2][2]  += b00[2] * a00[1];\n                result[4][2]  += b00[2] * a00[2];\n                result[4][3]  += b00[3] * a00[2];\n                result[0][3]  += b00[3] * a00[0];\n                result[0][2]  += b00[2] * a00[0];\n\n                result[5][0]  += b01[0] * a00[2];\n                result[5][1]  += b01[1] * a00[2];\n                result[1][1]  += b01[1] * a00[0];\n                result[1][0]  += b01[0] * a00[0];\n                result[7][0]  += b01[0] * a00[3];\n                result[7][1]  += b01[1] * a00[3];\n                result[3][1]  += b01[1] * a00[1];\n                result[3][0]  += b01[0] * a00[1];\n                result[13][0] += b01[0] * a01[2];\n                result[13][1] += b01[1] * a01[2];\n                result[9][1]  += b01[1] * a01[0];\n                result[9][0]  += b01[0] * a01[0];\n                result[15][0] += b01[0] * a01[3];\n                result[15][1] += b01[1] * a01[3];\n                result[11][1] += b01[1] * a01[1];\n                result[11][0] += b01[0] * a01[1];\n\n                result[15][2] += b01[2] * a01[3];\n                result[15][3] += b01[3] * a01[3];\n                result[11][3] += b01[3] * a01[1];\n                result[11][2] += b01[2] * a01[1];\n                result[13][2] += b01[2] * a01[2];\n                result[13][3] += b01[3] * a01[2];\n                result[9][3]  += b01[3] * a01[0];\n                result[9][2]  += b01[2] * a01[0];\n                result[7][2]  += b01[2] * a00[3];\n                result[7][3]  += b01[3] * a00[3];\n                result[3][3]  += b01[3] * a00[1];\n                result[3][2]  += b01[2] * a00[1];\n                result[5][2]  += b01[2] * a00[2];\n                result[5][3]  += b01[3] * a00[2];\n                result[1][3]  += b01[3] * a00[0];\n                result[1][2]  += b01[2] * a00[0];\n            }\n        }\n\n        shared_offset4 ^= 32 * 8;\n        read_A_offset4 ^= 32 * 8;\n        read_B_offset4 ^= 32 * 8;\n        track0 += stride_k * 8;\n        track2 += stride_k * 8;\n        track4 += stride_k * 8;\n        track6 += stride_k * 8;\n    }\n\n    {\n\n#if OPTIMIZE && N_DIVIDABLE_BY_64\n        device float4 *C4 = (device float4 *)((static_buffer + meta_buffer[2]));\n        const int N4 = N >> 2;\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n\n    #if !M_DIVIDABLE_BY_64\n            if (m >= M) continue;\n    #endif\n\n            const int n = group_position.y * 16 + n_offset * 2;\n            float4 result0 = result[m_sub * 2 + 0];\n            float4 result1 = result[m_sub * 2 + 1];\n\n            C4[m * N4 + n + 0] = result0;\n            C4[m * N4 + n + 1] = result1;\n\n            m++;\n        }\n#else\n        device float *C = (static_buffer + meta_buffer[2]);\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n            int n = group_position.y * 64 + n_offset * 8;\n\n            for (int n_sub1 = 0; n_sub1 < 2; n_sub1++)\n            {\n                for (int n_sub2 = 0; n_sub2 < 4; n_sub2++)\n                {\n\n    #if OPTIMIZE && M_DIVIDABLE_BY_64\n                    (         n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n    #else\n                    (m < M && n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n    #endif\n                    n++;\n                }\n            }\n\n            m++;\n        }\n#endif\n\n    }\n\n#undef M_DIVIDABLE_BY_64\n#undef N_DIVIDABLE_BY_64\n#undef K_DIVIDABLE_BY_8\n#undef A_STRIDE_K\n#undef B_STRIDE_K\n#undef A_STRIDE_M\n#undef B_STRIDE_N\n}\n\n\nkernel void fusedelementwise_873fb3d3d4d2589d1d055d2ea220ae42b62d1e03b01854ef5b7f6b9f(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    device float * v3 = (static_buffer + meta_buffer[2]);\n    const int v4 = meta_buffer[3];\n    const int v5 = meta_buffer[4];\n    const int D0 = meta_buffer[5];\n    const int D1 = meta_buffer[6];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v6 = v1[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v7 = v2[d0 + d1*v4];\n            float v8;\n            {\n                v8 = v7 + v6;\n            }\n            float v9;\n            {\n                const float slope = *((device float *)(&meta_buffer[7]));\n                v9 = v8 > 0 ? v8 : (v8 * slope);\n            }\n            float v10;\n            {\n                const float value = *((device float *)(&meta_buffer[8]));\n                v10 = v9 * value;\n            }\n            v3[d0 + d1*v5] = v10;\n        }\n    }\n}\n\n\nkernel void elementwiseadd_620a5dcfd600589f7c0e4c88e4b95c04f506b4492189eedef9605ad8(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    device float * v3 = (static_buffer + meta_buffer[2]);\n    const int v4 = meta_buffer[3];\n    const int v5 = meta_buffer[4];\n    const int D0 = meta_buffer[5];\n    const int D1 = meta_buffer[6];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v6 = v1[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v7 = v2[d0 + d1*v4];\n            float v8;\n            {\n                v8 = v7 + v6;\n            }\n            v3[d0*v5 + d1] = v8;\n        }\n    }\n}\n\n\nkernel void scalarpow_696465a8cc56f6719742be9898be20dc5761788dc945fd3b0257aa96(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    device float * v2 = (static_buffer + meta_buffer[1]);\n    const int D0 = meta_buffer[2];\n    int d0;\n    for (d0 = gid; d0 < D0; d0 += num_threads) {\n        const float v3 = v1[d0];\n        float v4;\n        {\n            const float value = *((device float *)(&meta_buffer[3]));\n            v4 = pow(v3, value);\n        }\n        v2[d0] = v4;\n    }\n}\n\n\nkernel void sum_62f710ed23f4414bbcf18742b16328d4b2413c34d5186416604604a5(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint index[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float *X = (static_buffer + meta_buffer[0]);\n    device float *Y = (static_buffer + meta_buffer[1]);\n    const device int *y_stride = (&(meta_buffer[2]));\n    const device int *y_shape = (&(meta_buffer[6]));\n    const device int *x_stride = (&(meta_buffer[10]));\n    const int D = meta_buffer[14];\n    const int N = meta_buffer[15];\n    const int MAX_GID = meta_buffer[16];\n    const int x_target_axis_stride = meta_buffer[17];\n\n    for (int gid = index; gid < MAX_GID; gid += num_threads) {\n        int x_index = 0;\n        for (int d = 0; d < D; d++) x_index += ((gid / y_stride[d]) % y_shape[d]) * x_stride[d];\n\n        float y = 0.0f;\n        for (int i = 0; i < N; i++) {\n            const float x = X[x_index];\n\n            y += x;\n\n            x_index += x_target_axis_stride;\n        }\n\n        Y[gid] = y;\n    }\n}\n\n\nkernel void fusedelementwise_8fcb7d309f7daaa8b239f427c5cf04fe568ebc477b8b04a12a5e256b(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    device float * v3 = (static_buffer + meta_buffer[2]);\n    const int v4 = meta_buffer[3];\n    const int v5 = meta_buffer[4];\n    const int D0 = meta_buffer[5];\n    const int D1 = meta_buffer[6];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v6 = v1[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            float v7;\n            {\n                const float value = *((device float *)(&meta_buffer[7]));\n                v7 = v6 * value;\n            }\n            float v8;\n            {\n                const float value = *((device float *)(&meta_buffer[8]));\n                v8 = v7 + value;\n            }\n            float v9;\n            {\n                const float value = *((device float *)(&meta_buffer[9]));\n                v9 = pow(v8, value);\n            }\n            const float v10 = v2[d0 + d1*v4];\n            float v11;\n            {\n                v11 = v10 / v9;\n            }\n            float v12;\n            {\n                const float slope = *((device float *)(&meta_buffer[10]));\n                v12 = v11 > 0 ? v11 : (v11 * slope);\n            }\n            v3[d0*v5 + d1] = v12;\n        }\n    }\n}\n\n\nkernel void unpooling2d_0b56b02b3c2d5b9bccd4aad4ddcda29e98f0a8d1c12e07d06f39c912(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint index[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float *X = (static_buffer + meta_buffer[0]);\n    device float *Y = (static_buffer + meta_buffer[1]);\n    const int N = meta_buffer[2];\n    const int H1 = meta_buffer[3];\n    const int W1 = meta_buffer[4];\n    const int C = meta_buffer[5];\n    const int H2 = meta_buffer[6];\n    const int W2 = meta_buffer[7];\n\n    const int KH = meta_buffer[8];\n    const int KW = meta_buffer[9];\n    const int SH = meta_buffer[10];\n    const int SW = meta_buffer[11];\n    const int PH = meta_buffer[12];\n    const int PW = meta_buffer[13];\n\n    for (int gid = index; gid < N * H2 * W2 * C; gid += num_threads) {\n        const int c = gid % C;\n        const int w2 = gid / C % W2;\n        const int h2 = gid / C / W2 % H2;\n        const int n = gid / C / W2 / H2;\n\n        float v = 0;\n        for (int kh = 0; kh < KH; kh++) {\n            int h1 = h2 + PH - kh;\n            if (h1 < 0 || h1 >= H1 * SH) continue;\n            if (h1 % SH != 0) continue;\n            h1 /= SH;\n            for (int kw = 0; kw < KW; kw++) {\n                int w1 = w2 + PW - kw;\n                if (w1 < 0 || w1 >= W1 * SW) continue;\n                if (w1 % SW != 0) continue;\n                w1 /= SW;\n                v += X[((n * H1 + h1) * W1 + w1) * C + c];\n            }\n        }\n\n        Y[gid] = v;\n    }\n}\n\n\nkernel void tensordot_291ea7d32ad11e41e6bd4219499a657cb96247731a43990b62e2f287(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint index[[thread_index_in_threadgroup]],\n                          uint2 group_position[[threadgroup_position_in_grid]])\n{\n#define M_DIVIDABLE_BY_64 1\n#define N_DIVIDABLE_BY_64 1\n#define K_DIVIDABLE_BY_8 1\n\n#define A_STRIDE_K M\n#define A_STRIDE_M 1\n\n#define B_STRIDE_K N\n#define B_STRIDE_N 1\n\n#if K_DIVIDABLE_BY_8 && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64 && OPTIMIZE\n    const device float4 *load_target4 = (index & 32)\n        ? (const device float4 *)((static_buffer + meta_buffer[1]))\n        : (const device float4 *)((static_buffer + meta_buffer[0]));\n#else\n    const device float *load_target = (index & 32)\n        ? ((static_buffer + meta_buffer[1]))\n        : ((static_buffer + meta_buffer[0]));\n#endif\n\n    const int M = meta_buffer[3];\n    const int N = meta_buffer[4];\n\n    const int K = meta_buffer[5];\n\n    threadgroup float4 shared4[32 * 8 * 2];\n\n    const int stride_k = (index & 32) ? B_STRIDE_K : A_STRIDE_K;\n    const int stride_mn = (index & 32) ? B_STRIDE_N : A_STRIDE_M;\n\n    const int m_offset = index & 7;\n    const int n_offset = index >> 3;\n\n    const int mn_load_offset = ((index & 32) ? group_position.y : group_position.x) * 64 + (index & 15) * 4;\n    const int k_load_offset = ((index & 16) ? 1 : 0);\n\n    int track0 = mn_load_offset * stride_mn + (k_load_offset + 0) * stride_k;\n    int track2 = track0 + 2 * stride_k;\n    int track4 = track0 + 4 * stride_k;\n    int track6 = track0 + 6 * stride_k;\n\n#if !OPTIMIZE || !M_DIVIDABLE_BY_64 || !N_DIVIDABLE_BY_64\n    const int max_MN = (index & 32) ? N : M;\n#endif\n\n    int shared_offset4 = ((index & 32) ? 16 : 0) + k_load_offset * 32 + (index & 15);\n    int read_A_offset4 = m_offset * 2;\n    int read_B_offset4 = n_offset * 2 + 16;\n\n    float4 result[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n    int k = 0;\n\n    while (k < K)\n    {\n        {\n#if OPTIMIZE && K_DIVIDABLE_BY_8\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n        #if OPTIMIZE\n            shared4[shared_offset4 + 32 * 0] = load_target4[track0 >> 2];\n            shared4[shared_offset4 + 32 * 2] = load_target4[track2 >> 2];\n            shared4[shared_offset4 + 32 * 4] = load_target4[track4 >> 2];\n            shared4[shared_offset4 + 32 * 6] = load_target4[track6 >> 2];\n        #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                load_target[track0 + stride_mn * 0],\n                load_target[track0 + stride_mn * 1],\n                load_target[track0 + stride_mn * 2],\n                load_target[track0 + stride_mn * 3]\n            );\n            shared4[shared_offset4 + 32 * 2] = float4(\n                load_target[track2 + stride_mn * 0],\n                load_target[track2 + stride_mn * 1],\n                load_target[track2 + stride_mn * 2],\n                load_target[track2 + stride_mn * 3]\n            );\n            shared4[shared_offset4 + 32 * 4] = float4(\n                load_target[track4 + stride_mn * 0],\n                load_target[track4 + stride_mn * 1],\n                load_target[track4 + stride_mn * 2],\n                load_target[track4 + stride_mn * 3]\n            );\n            shared4[shared_offset4 + 32 * 6] = float4(\n                load_target[track6 + stride_mn * 0],\n                load_target[track6 + stride_mn * 1],\n                load_target[track6 + stride_mn * 2],\n                load_target[track6 + stride_mn * 3]\n            );\n        #endif\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            );\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            );\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            );\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            );\n    #endif\n\n            k += 8;\n#else\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 3]\n            );\n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 3]\n            );\n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 3]\n            );\n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 3]\n            );\n            k += 2;\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            );\n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            );\n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            );\n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            );\n            k += 2;\n    #endif\n#endif\n        }\n\n        threadgroup_barrier(mem_flags::mem_threadgroup);\n\n        {\n            for (int k_sub = 0; k_sub < 8; k_sub++)\n            {\n                float4 a00 = shared4[32 * k_sub + read_A_offset4 + 0];\n                float4 a01 = shared4[32 * k_sub + read_A_offset4 + 1];\n                float4 b00 = shared4[32 * k_sub + read_B_offset4 + 0];\n                float4 b01 = shared4[32 * k_sub + read_B_offset4 + 1];\n\n                result[4][0]  += b00[0] * a00[2];\n                result[4][1]  += b00[1] * a00[2];\n                result[0][1]  += b00[1] * a00[0];\n                result[0][0]  += b00[0] * a00[0];\n                result[6][0]  += b00[0] * a00[3];\n                result[6][1]  += b00[1] * a00[3];\n                result[2][1]  += b00[1] * a00[1];\n                result[2][0]  += b00[0] * a00[1];\n                result[12][0] += b00[0] * a01[2];\n                result[12][1] += b00[1] * a01[2];\n                result[8][1]  += b00[1] * a01[0];\n                result[8][0]  += b00[0] * a01[0];\n                result[14][0] += b00[0] * a01[3];\n                result[14][1] += b00[1] * a01[3];\n                result[10][1] += b00[1] * a01[1];\n                result[10][0] += b00[0] * a01[1];\n\n                result[14][2] += b00[2] * a01[3];\n                result[14][3] += b00[3] * a01[3];\n                result[10][3] += b00[3] * a01[1];\n                result[10][2] += b00[2] * a01[1];\n                result[12][2] += b00[2] * a01[2];\n                result[12][3] += b00[3] * a01[2];\n                result[8][3]  += b00[3] * a01[0];\n                result[8][2]  += b00[2] * a01[0];\n                result[6][2]  += b00[2] * a00[3];\n                result[6][3]  += b00[3] * a00[3];\n                result[2][3]  += b00[3] * a00[1];\n                result[2][2]  += b00[2] * a00[1];\n                result[4][2]  += b00[2] * a00[2];\n                result[4][3]  += b00[3] * a00[2];\n                result[0][3]  += b00[3] * a00[0];\n                result[0][2]  += b00[2] * a00[0];\n\n                result[5][0]  += b01[0] * a00[2];\n                result[5][1]  += b01[1] * a00[2];\n                result[1][1]  += b01[1] * a00[0];\n                result[1][0]  += b01[0] * a00[0];\n                result[7][0]  += b01[0] * a00[3];\n                result[7][1]  += b01[1] * a00[3];\n                result[3][1]  += b01[1] * a00[1];\n                result[3][0]  += b01[0] * a00[1];\n                result[13][0] += b01[0] * a01[2];\n                result[13][1] += b01[1] * a01[2];\n                result[9][1]  += b01[1] * a01[0];\n                result[9][0]  += b01[0] * a01[0];\n                result[15][0] += b01[0] * a01[3];\n                result[15][1] += b01[1] * a01[3];\n                result[11][1] += b01[1] * a01[1];\n                result[11][0] += b01[0] * a01[1];\n\n                result[15][2] += b01[2] * a01[3];\n                result[15][3] += b01[3] * a01[3];\n                result[11][3] += b01[3] * a01[1];\n                result[11][2] += b01[2] * a01[1];\n                result[13][2] += b01[2] * a01[2];\n                result[13][3] += b01[3] * a01[2];\n                result[9][3]  += b01[3] * a01[0];\n                result[9][2]  += b01[2] * a01[0];\n                result[7][2]  += b01[2] * a00[3];\n                result[7][3]  += b01[3] * a00[3];\n                result[3][3]  += b01[3] * a00[1];\n                result[3][2]  += b01[2] * a00[1];\n                result[5][2]  += b01[2] * a00[2];\n                result[5][3]  += b01[3] * a00[2];\n                result[1][3]  += b01[3] * a00[0];\n                result[1][2]  += b01[2] * a00[0];\n            }\n        }\n\n        shared_offset4 ^= 32 * 8;\n        read_A_offset4 ^= 32 * 8;\n        read_B_offset4 ^= 32 * 8;\n        track0 += stride_k * 8;\n        track2 += stride_k * 8;\n        track4 += stride_k * 8;\n        track6 += stride_k * 8;\n    }\n\n    {\n\n#if OPTIMIZE && N_DIVIDABLE_BY_64\n        device float4 *C4 = (device float4 *)((static_buffer + meta_buffer[2]));\n        const int N4 = N >> 2;\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n\n    #if !M_DIVIDABLE_BY_64\n            if (m >= M) continue;\n    #endif\n\n            const int n = group_position.y * 16 + n_offset * 2;\n            float4 result0 = result[m_sub * 2 + 0];\n            float4 result1 = result[m_sub * 2 + 1];\n\n            C4[m * N4 + n + 0] = result0;\n            C4[m * N4 + n + 1] = result1;\n\n            m++;\n        }\n#else\n        device float *C = (static_buffer + meta_buffer[2]);\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n            int n = group_position.y * 64 + n_offset * 8;\n\n            for (int n_sub1 = 0; n_sub1 < 2; n_sub1++)\n            {\n                for (int n_sub2 = 0; n_sub2 < 4; n_sub2++)\n                {\n\n    #if OPTIMIZE && M_DIVIDABLE_BY_64\n                    (         n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n    #else\n                    (m < M && n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n    #endif\n                    n++;\n                }\n            }\n\n            m++;\n        }\n#endif\n\n    }\n\n#undef M_DIVIDABLE_BY_64\n#undef N_DIVIDABLE_BY_64\n#undef K_DIVIDABLE_BY_8\n#undef A_STRIDE_K\n#undef B_STRIDE_K\n#undef A_STRIDE_M\n#undef B_STRIDE_N\n}\n\n\nkernel void fusedelementwise_5d1162a37f46ff8f350a1877fe376a78186dbaafcbcc27a08b5cb1be(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    device float * v3 = (static_buffer + meta_buffer[2]);\n    const int v4 = meta_buffer[3];\n    const int v5 = meta_buffer[4];\n    const int D0 = meta_buffer[5];\n    const int D1 = meta_buffer[6];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v6 = v1[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            float v7;\n            {\n                const float value = *((device float *)(&meta_buffer[7]));\n                v7 = v6 * value;\n            }\n            float v8;\n            {\n                const float value = *((device float *)(&meta_buffer[8]));\n                v8 = v7 + value;\n            }\n            float v9;\n            {\n                const float value = *((device float *)(&meta_buffer[9]));\n                v9 = pow(v8, value);\n            }\n            const float v10 = v2[d0 + d1*v4];\n            float v11;\n            {\n                v11 = v10 / v9;\n            }\n            float v12;\n            {\n                const float slope = *((device float *)(&meta_buffer[10]));\n                v12 = v11 > 0 ? v11 : (v11 * slope);\n            }\n            float v13;\n            {\n                const float value = *((device float *)(&meta_buffer[11]));\n                v13 = v12 * value;\n            }\n            v3[d0*v5 + d1] = v13;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_0c8bca748a43615bcc0e1a25ec31a2e87db264978e382cbf667342bc(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    device float * v3 = (static_buffer + meta_buffer[2]);\n    const int v4 = meta_buffer[3];\n    const int v5 = meta_buffer[4];\n    const int D0 = meta_buffer[5];\n    const int D1 = meta_buffer[6];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v6 = v2[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            float v7;\n            {\n                const float value = *((device float *)(&meta_buffer[7]));\n                v7 = v6 * value;\n            }\n            float v8;\n            {\n                const float value = *((device float *)(&meta_buffer[8]));\n                v8 = v7 + value;\n            }\n            float v9;\n            {\n                const float value = *((device float *)(&meta_buffer[9]));\n                v9 = pow(v8, value);\n            }\n            const float v10 = v1[d0 + d1*v4];\n            float v11;\n            {\n                v11 = v10 / v9;\n            }\n            float v12;\n            {\n                const float slope = *((device float *)(&meta_buffer[10]));\n                v12 = v11 > 0 ? v11 : (v11 * slope);\n            }\n            v3[d0*v5 + d1] = v12;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_9a4b3c7e226ed709c8694fe7a713b6621becc90622cbc6a923a82aa9(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    device float * v3 = (static_buffer + meta_buffer[2]);\n    const int v4 = meta_buffer[3];\n    const int v5 = meta_buffer[4];\n    const int D0 = meta_buffer[5];\n    const int D1 = meta_buffer[6];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v6 = v2[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            float v7;\n            {\n                const float value = *((device float *)(&meta_buffer[7]));\n                v7 = v6 * value;\n            }\n            float v8;\n            {\n                const float value = *((device float *)(&meta_buffer[8]));\n                v8 = v7 + value;\n            }\n            float v9;\n            {\n                const float value = *((device float *)(&meta_buffer[9]));\n                v9 = pow(v8, value);\n            }\n            const float v10 = v1[d0 + d1*v4];\n            float v11;\n            {\n                v11 = v10 / v9;\n            }\n            float v12;\n            {\n                const float slope = *((device float *)(&meta_buffer[10]));\n                v12 = v11 > 0 ? v11 : (v11 * slope);\n            }\n            float v13;\n            {\n                const float value = *((device float *)(&meta_buffer[11]));\n                v13 = v12 * value;\n            }\n            v3[d0*v5 + d1] = v13;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_24dda3c48fc3b2fc196dcbc279a7d3ea5489513a005bb602db755a27(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    device float * v3 = (static_buffer + meta_buffer[2]);\n    const int v4 = meta_buffer[3];\n    const int v5 = meta_buffer[4];\n    const int D0 = meta_buffer[5];\n    const int D1 = meta_buffer[6];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v6 = v2[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            float v7;\n            {\n                const float value = *((device float *)(&meta_buffer[7]));\n                v7 = v6 * value;\n            }\n            float v8;\n            {\n                const float value = *((device float *)(&meta_buffer[8]));\n                v8 = v7 + value;\n            }\n            float v9;\n            {\n                const float value = *((device float *)(&meta_buffer[9]));\n                v9 = pow(v8, value);\n            }\n            const float v10 = v1[d0 + d1*v4];\n            float v11;\n            {\n                v11 = v10 / v9;\n            }\n            float v12;\n            {\n                const float slope = *((device float *)(&meta_buffer[10]));\n                v12 = v11 > 0 ? v11 : (v11 * slope);\n            }\n            float v13;\n            {\n                const float value = *((device float *)(&meta_buffer[11]));\n                v13 = v12 * value;\n            }\n            v3[d0 + d1*v5] = v13;\n        }\n    }\n}\n\n\nkernel void tensordot_488954f1cb868fb263cb3fa8afa4357054169df3d2df0ca624f30099(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint index[[thread_index_in_threadgroup]],\n                          uint2 group_position[[threadgroup_position_in_grid]])\n{\n#define M_DIVIDABLE_BY_64 1\n#define N_DIVIDABLE_BY_64 0\n#define K_DIVIDABLE_BY_8 1\n\n#define A_STRIDE_K M\n#define A_STRIDE_M 1\n\n#define B_STRIDE_K N\n#define B_STRIDE_N 1\n\n#if K_DIVIDABLE_BY_8 && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64 && OPTIMIZE\n    const device float4 *load_target4 = (index & 32)\n        ? (const device float4 *)((static_buffer + meta_buffer[1]))\n        : (const device float4 *)((static_buffer + meta_buffer[0]));\n#else\n    const device float *load_target = (index & 32)\n        ? ((static_buffer + meta_buffer[1]))\n        : ((static_buffer + meta_buffer[0]));\n#endif\n\n    const int M = meta_buffer[3];\n    const int N = meta_buffer[4];\n\n    const int K = meta_buffer[5];\n\n    threadgroup float4 shared4[32 * 8 * 2];\n\n    const int stride_k = (index & 32) ? B_STRIDE_K : A_STRIDE_K;\n    const int stride_mn = (index & 32) ? B_STRIDE_N : A_STRIDE_M;\n\n    const int m_offset = index & 7;\n    const int n_offset = index >> 3;\n\n    const int mn_load_offset = ((index & 32) ? group_position.y : group_position.x) * 64 + (index & 15) * 4;\n    const int k_load_offset = ((index & 16) ? 1 : 0);\n\n    int track0 = mn_load_offset * stride_mn + (k_load_offset + 0) * stride_k;\n    int track2 = track0 + 2 * stride_k;\n    int track4 = track0 + 4 * stride_k;\n    int track6 = track0 + 6 * stride_k;\n\n#if !OPTIMIZE || !M_DIVIDABLE_BY_64 || !N_DIVIDABLE_BY_64\n    const int max_MN = (index & 32) ? N : M;\n#endif\n\n    int shared_offset4 = ((index & 32) ? 16 : 0) + k_load_offset * 32 + (index & 15);\n    int read_A_offset4 = m_offset * 2;\n    int read_B_offset4 = n_offset * 2 + 16;\n\n    float4 result[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n    int k = 0;\n\n    while (k < K)\n    {\n        {\n#if OPTIMIZE && K_DIVIDABLE_BY_8\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n        #if OPTIMIZE\n            shared4[shared_offset4 + 32 * 0] = load_target4[track0 >> 2];\n            shared4[shared_offset4 + 32 * 2] = load_target4[track2 >> 2];\n            shared4[shared_offset4 + 32 * 4] = load_target4[track4 >> 2];\n            shared4[shared_offset4 + 32 * 6] = load_target4[track6 >> 2];\n        #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                load_target[track0 + stride_mn * 0],\n                load_target[track0 + stride_mn * 1],\n                load_target[track0 + stride_mn * 2],\n                load_target[track0 + stride_mn * 3]\n            );\n            shared4[shared_offset4 + 32 * 2] = float4(\n                load_target[track2 + stride_mn * 0],\n                load_target[track2 + stride_mn * 1],\n                load_target[track2 + stride_mn * 2],\n                load_target[track2 + stride_mn * 3]\n            );\n            shared4[shared_offset4 + 32 * 4] = float4(\n                load_target[track4 + stride_mn * 0],\n                load_target[track4 + stride_mn * 1],\n                load_target[track4 + stride_mn * 2],\n                load_target[track4 + stride_mn * 3]\n            );\n            shared4[shared_offset4 + 32 * 6] = float4(\n                load_target[track6 + stride_mn * 0],\n                load_target[track6 + stride_mn * 1],\n                load_target[track6 + stride_mn * 2],\n                load_target[track6 + stride_mn * 3]\n            );\n        #endif\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            );\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            );\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            );\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            );\n    #endif\n\n            k += 8;\n#else\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 3]\n            );\n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 3]\n            );\n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 3]\n            );\n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 3]\n            );\n            k += 2;\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            );\n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            );\n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            );\n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            );\n            k += 2;\n    #endif\n#endif\n        }\n\n        threadgroup_barrier(mem_flags::mem_threadgroup);\n\n        {\n            for (int k_sub = 0; k_sub < 8; k_sub++)\n            {\n                float4 a00 = shared4[32 * k_sub + read_A_offset4 + 0];\n                float4 a01 = shared4[32 * k_sub + read_A_offset4 + 1];\n                float4 b00 = shared4[32 * k_sub + read_B_offset4 + 0];\n                float4 b01 = shared4[32 * k_sub + read_B_offset4 + 1];\n\n                result[4][0]  += b00[0] * a00[2];\n                result[4][1]  += b00[1] * a00[2];\n                result[0][1]  += b00[1] * a00[0];\n                result[0][0]  += b00[0] * a00[0];\n                result[6][0]  += b00[0] * a00[3];\n                result[6][1]  += b00[1] * a00[3];\n                result[2][1]  += b00[1] * a00[1];\n                result[2][0]  += b00[0] * a00[1];\n                result[12][0] += b00[0] * a01[2];\n                result[12][1] += b00[1] * a01[2];\n                result[8][1]  += b00[1] * a01[0];\n                result[8][0]  += b00[0] * a01[0];\n                result[14][0] += b00[0] * a01[3];\n                result[14][1] += b00[1] * a01[3];\n                result[10][1] += b00[1] * a01[1];\n                result[10][0] += b00[0] * a01[1];\n\n                result[14][2] += b00[2] * a01[3];\n                result[14][3] += b00[3] * a01[3];\n                result[10][3] += b00[3] * a01[1];\n                result[10][2] += b00[2] * a01[1];\n                result[12][2] += b00[2] * a01[2];\n                result[12][3] += b00[3] * a01[2];\n                result[8][3]  += b00[3] * a01[0];\n                result[8][2]  += b00[2] * a01[0];\n                result[6][2]  += b00[2] * a00[3];\n                result[6][3]  += b00[3] * a00[3];\n                result[2][3]  += b00[3] * a00[1];\n                result[2][2]  += b00[2] * a00[1];\n                result[4][2]  += b00[2] * a00[2];\n                result[4][3]  += b00[3] * a00[2];\n                result[0][3]  += b00[3] * a00[0];\n                result[0][2]  += b00[2] * a00[0];\n\n                result[5][0]  += b01[0] * a00[2];\n                result[5][1]  += b01[1] * a00[2];\n                result[1][1]  += b01[1] * a00[0];\n                result[1][0]  += b01[0] * a00[0];\n                result[7][0]  += b01[0] * a00[3];\n                result[7][1]  += b01[1] * a00[3];\n                result[3][1]  += b01[1] * a00[1];\n                result[3][0]  += b01[0] * a00[1];\n                result[13][0] += b01[0] * a01[2];\n                result[13][1] += b01[1] * a01[2];\n                result[9][1]  += b01[1] * a01[0];\n                result[9][0]  += b01[0] * a01[0];\n                result[15][0] += b01[0] * a01[3];\n                result[15][1] += b01[1] * a01[3];\n                result[11][1] += b01[1] * a01[1];\n                result[11][0] += b01[0] * a01[1];\n\n                result[15][2] += b01[2] * a01[3];\n                result[15][3] += b01[3] * a01[3];\n                result[11][3] += b01[3] * a01[1];\n                result[11][2] += b01[2] * a01[1];\n                result[13][2] += b01[2] * a01[2];\n                result[13][3] += b01[3] * a01[2];\n                result[9][3]  += b01[3] * a01[0];\n                result[9][2]  += b01[2] * a01[0];\n                result[7][2]  += b01[2] * a00[3];\n                result[7][3]  += b01[3] * a00[3];\n                result[3][3]  += b01[3] * a00[1];\n                result[3][2]  += b01[2] * a00[1];\n                result[5][2]  += b01[2] * a00[2];\n                result[5][3]  += b01[3] * a00[2];\n                result[1][3]  += b01[3] * a00[0];\n                result[1][2]  += b01[2] * a00[0];\n            }\n        }\n\n        shared_offset4 ^= 32 * 8;\n        read_A_offset4 ^= 32 * 8;\n        read_B_offset4 ^= 32 * 8;\n        track0 += stride_k * 8;\n        track2 += stride_k * 8;\n        track4 += stride_k * 8;\n        track6 += stride_k * 8;\n    }\n\n    {\n\n#if OPTIMIZE && N_DIVIDABLE_BY_64\n        device float4 *C4 = (device float4 *)((static_buffer + meta_buffer[2]));\n        const int N4 = N >> 2;\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n\n    #if !M_DIVIDABLE_BY_64\n            if (m >= M) continue;\n    #endif\n\n            const int n = group_position.y * 16 + n_offset * 2;\n            float4 result0 = result[m_sub * 2 + 0];\n            float4 result1 = result[m_sub * 2 + 1];\n\n            C4[m * N4 + n + 0] = result0;\n            C4[m * N4 + n + 1] = result1;\n\n            m++;\n        }\n#else\n        device float *C = (static_buffer + meta_buffer[2]);\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n            int n = group_position.y * 64 + n_offset * 8;\n\n            for (int n_sub1 = 0; n_sub1 < 2; n_sub1++)\n            {\n                for (int n_sub2 = 0; n_sub2 < 4; n_sub2++)\n                {\n\n    #if OPTIMIZE && M_DIVIDABLE_BY_64\n                    (         n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n    #else\n                    (m < M && n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n    #endif\n                    n++;\n                }\n            }\n\n            m++;\n        }\n#endif\n\n    }\n\n#undef M_DIVIDABLE_BY_64\n#undef N_DIVIDABLE_BY_64\n#undef K_DIVIDABLE_BY_8\n#undef A_STRIDE_K\n#undef B_STRIDE_K\n#undef A_STRIDE_M\n#undef B_STRIDE_N\n}\n\n\nkernel void fusedelementwise_e05a27890b9d9f3aa8c0be8de5871ebe2f3c64852c460f2ca6b8ca27(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    device float * v4 = (static_buffer + meta_buffer[3]);\n    const int v5 = meta_buffer[4];\n    const int v6 = meta_buffer[5];\n    const int v7 = meta_buffer[6];\n    const int D0 = meta_buffer[7];\n    const int D1 = meta_buffer[8];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v8 = v1[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v9 = v3[d0 + d1*v6];\n            float v10;\n            {\n                v10 = v9 + v8;\n            }\n            const float v11 = v2[d0*v5 + d1];\n            float v12;\n            {\n                v12 = v10 > v11 ? 1.0 : 0.0;\n            }\n            float v13;\n            {\n                const float value = *((device float *)(&meta_buffer[9]));\n                v13 = v12 * value;\n            }\n            float v14;\n            {\n                const int value = meta_buffer[10];\n                v14 = v13 + value;\n            }\n            float v15;\n            {\n                v15 = v10 * v14;\n            }\n            float v16;\n            {\n                v16 = v15 + v12;\n            }\n            v4[d0 + d1*v7] = v16;\n        }\n    }\n}\n\n\nkernel void transpose_1a0fbadea0475062956fc679399ce2f40129cb877aec049982efb309(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    device float * v2 = (static_buffer + meta_buffer[1]);\n    const int v3 = meta_buffer[2];\n    const int v4 = meta_buffer[3];\n    const int D0 = meta_buffer[4];\n    const int D1 = meta_buffer[5];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v5 = v1[d0*v3 + d1];\n            float v6;\n            {\n                v6 = v5;\n            }\n            v2[d0 + d1*v4] = v6;\n        }\n    }\n}\n\n\nkernel void scalarmul_ad03c6307fb13122823fcc851ec95814f1785ffc9d07db83096af8a0(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    device float * v2 = (static_buffer + meta_buffer[1]);\n    const int v3 = meta_buffer[2];\n    const int v4 = meta_buffer[3];\n    const int D0 = meta_buffer[4];\n    const int D1 = meta_buffer[5];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v5 = v1[d0*v3 + d1];\n            float v6;\n            {\n                const float value = *((device float *)(&meta_buffer[6]));\n                v6 = v5 * value;\n            }\n            v2[d0 + d1*v4] = v6;\n        }\n    }\n}\n\n\nkernel void tensordot_9d895cd7f9fb7f03b33f81c62b72615e90d48dc2748ce9a7d0fe1490(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint index[[thread_index_in_threadgroup]],\n                          uint2 group_position[[threadgroup_position_in_grid]])\n{\n#define M_DIVIDABLE_BY_64 1\n#define N_DIVIDABLE_BY_64 0\n#define K_DIVIDABLE_BY_8 0\n\n#define A_STRIDE_K M\n#define A_STRIDE_M 1\n\n#define B_STRIDE_K N\n#define B_STRIDE_N 1\n\n#if K_DIVIDABLE_BY_8 && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64 && OPTIMIZE\n    const device float4 *load_target4 = (index & 32)\n        ? (const device float4 *)((static_buffer + meta_buffer[1]))\n        : (const device float4 *)((static_buffer + meta_buffer[0]));\n#else\n    const device float *load_target = (index & 32)\n        ? ((static_buffer + meta_buffer[1]))\n        : ((static_buffer + meta_buffer[0]));\n#endif\n\n    const int M = meta_buffer[3];\n    const int N = meta_buffer[4];\n\n    const int K = meta_buffer[5];\n\n    threadgroup float4 shared4[32 * 8 * 2];\n\n    const int stride_k = (index & 32) ? B_STRIDE_K : A_STRIDE_K;\n    const int stride_mn = (index & 32) ? B_STRIDE_N : A_STRIDE_M;\n\n    const int m_offset = index & 7;\n    const int n_offset = index >> 3;\n\n    const int mn_load_offset = ((index & 32) ? group_position.y : group_position.x) * 64 + (index & 15) * 4;\n    const int k_load_offset = ((index & 16) ? 1 : 0);\n\n    int track0 = mn_load_offset * stride_mn + (k_load_offset + 0) * stride_k;\n    int track2 = track0 + 2 * stride_k;\n    int track4 = track0 + 4 * stride_k;\n    int track6 = track0 + 6 * stride_k;\n\n#if !OPTIMIZE || !M_DIVIDABLE_BY_64 || !N_DIVIDABLE_BY_64\n    const int max_MN = (index & 32) ? N : M;\n#endif\n\n    int shared_offset4 = ((index & 32) ? 16 : 0) + k_load_offset * 32 + (index & 15);\n    int read_A_offset4 = m_offset * 2;\n    int read_B_offset4 = n_offset * 2 + 16;\n\n    float4 result[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n    int k = 0;\n\n    while (k < K)\n    {\n        {\n#if OPTIMIZE && K_DIVIDABLE_BY_8\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n        #if OPTIMIZE\n            shared4[shared_offset4 + 32 * 0] = load_target4[track0 >> 2];\n            shared4[shared_offset4 + 32 * 2] = load_target4[track2 >> 2];\n            shared4[shared_offset4 + 32 * 4] = load_target4[track4 >> 2];\n            shared4[shared_offset4 + 32 * 6] = load_target4[track6 >> 2];\n        #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                load_target[track0 + stride_mn * 0],\n                load_target[track0 + stride_mn * 1],\n                load_target[track0 + stride_mn * 2],\n                load_target[track0 + stride_mn * 3]\n            );\n            shared4[shared_offset4 + 32 * 2] = float4(\n                load_target[track2 + stride_mn * 0],\n                load_target[track2 + stride_mn * 1],\n                load_target[track2 + stride_mn * 2],\n                load_target[track2 + stride_mn * 3]\n            );\n            shared4[shared_offset4 + 32 * 4] = float4(\n                load_target[track4 + stride_mn * 0],\n                load_target[track4 + stride_mn * 1],\n                load_target[track4 + stride_mn * 2],\n                load_target[track4 + stride_mn * 3]\n            );\n            shared4[shared_offset4 + 32 * 6] = float4(\n                load_target[track6 + stride_mn * 0],\n                load_target[track6 + stride_mn * 1],\n                load_target[track6 + stride_mn * 2],\n                load_target[track6 + stride_mn * 3]\n            );\n        #endif\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            );\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            );\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            );\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            );\n    #endif\n\n            k += 8;\n#else\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 3]\n            );\n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 3]\n            );\n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 3]\n            );\n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 3]\n            );\n            k += 2;\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            );\n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            );\n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            );\n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            );\n            k += 2;\n    #endif\n#endif\n        }\n\n        threadgroup_barrier(mem_flags::mem_threadgroup);\n\n        {\n            for (int k_sub = 0; k_sub < 8; k_sub++)\n            {\n                float4 a00 = shared4[32 * k_sub + read_A_offset4 + 0];\n                float4 a01 = shared4[32 * k_sub + read_A_offset4 + 1];\n                float4 b00 = shared4[32 * k_sub + read_B_offset4 + 0];\n                float4 b01 = shared4[32 * k_sub + read_B_offset4 + 1];\n\n                result[4][0]  += b00[0] * a00[2];\n                result[4][1]  += b00[1] * a00[2];\n                result[0][1]  += b00[1] * a00[0];\n                result[0][0]  += b00[0] * a00[0];\n                result[6][0]  += b00[0] * a00[3];\n                result[6][1]  += b00[1] * a00[3];\n                result[2][1]  += b00[1] * a00[1];\n                result[2][0]  += b00[0] * a00[1];\n                result[12][0] += b00[0] * a01[2];\n                result[12][1] += b00[1] * a01[2];\n                result[8][1]  += b00[1] * a01[0];\n                result[8][0]  += b00[0] * a01[0];\n                result[14][0] += b00[0] * a01[3];\n                result[14][1] += b00[1] * a01[3];\n                result[10][1] += b00[1] * a01[1];\n                result[10][0] += b00[0] * a01[1];\n\n                result[14][2] += b00[2] * a01[3];\n                result[14][3] += b00[3] * a01[3];\n                result[10][3] += b00[3] * a01[1];\n                result[10][2] += b00[2] * a01[1];\n                result[12][2] += b00[2] * a01[2];\n                result[12][3] += b00[3] * a01[2];\n                result[8][3]  += b00[3] * a01[0];\n                result[8][2]  += b00[2] * a01[0];\n                result[6][2]  += b00[2] * a00[3];\n                result[6][3]  += b00[3] * a00[3];\n                result[2][3]  += b00[3] * a00[1];\n                result[2][2]  += b00[2] * a00[1];\n                result[4][2]  += b00[2] * a00[2];\n                result[4][3]  += b00[3] * a00[2];\n                result[0][3]  += b00[3] * a00[0];\n                result[0][2]  += b00[2] * a00[0];\n\n                result[5][0]  += b01[0] * a00[2];\n                result[5][1]  += b01[1] * a00[2];\n                result[1][1]  += b01[1] * a00[0];\n                result[1][0]  += b01[0] * a00[0];\n                result[7][0]  += b01[0] * a00[3];\n                result[7][1]  += b01[1] * a00[3];\n                result[3][1]  += b01[1] * a00[1];\n                result[3][0]  += b01[0] * a00[1];\n                result[13][0] += b01[0] * a01[2];\n                result[13][1] += b01[1] * a01[2];\n                result[9][1]  += b01[1] * a01[0];\n                result[9][0]  += b01[0] * a01[0];\n                result[15][0] += b01[0] * a01[3];\n                result[15][1] += b01[1] * a01[3];\n                result[11][1] += b01[1] * a01[1];\n                result[11][0] += b01[0] * a01[1];\n\n                result[15][2] += b01[2] * a01[3];\n                result[15][3] += b01[3] * a01[3];\n                result[11][3] += b01[3] * a01[1];\n                result[11][2] += b01[2] * a01[1];\n                result[13][2] += b01[2] * a01[2];\n                result[13][3] += b01[3] * a01[2];\n                result[9][3]  += b01[3] * a01[0];\n                result[9][2]  += b01[2] * a01[0];\n                result[7][2]  += b01[2] * a00[3];\n                result[7][3]  += b01[3] * a00[3];\n                result[3][3]  += b01[3] * a00[1];\n                result[3][2]  += b01[2] * a00[1];\n                result[5][2]  += b01[2] * a00[2];\n                result[5][3]  += b01[3] * a00[2];\n                result[1][3]  += b01[3] * a00[0];\n                result[1][2]  += b01[2] * a00[0];\n            }\n        }\n\n        shared_offset4 ^= 32 * 8;\n        read_A_offset4 ^= 32 * 8;\n        read_B_offset4 ^= 32 * 8;\n        track0 += stride_k * 8;\n        track2 += stride_k * 8;\n        track4 += stride_k * 8;\n        track6 += stride_k * 8;\n    }\n\n    {\n\n#if OPTIMIZE && N_DIVIDABLE_BY_64\n        device float4 *C4 = (device float4 *)((static_buffer + meta_buffer[2]));\n        const int N4 = N >> 2;\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n\n    #if !M_DIVIDABLE_BY_64\n            if (m >= M) continue;\n    #endif\n\n            const int n = group_position.y * 16 + n_offset * 2;\n            float4 result0 = result[m_sub * 2 + 0];\n            float4 result1 = result[m_sub * 2 + 1];\n\n            C4[m * N4 + n + 0] = result0;\n            C4[m * N4 + n + 1] = result1;\n\n            m++;\n        }\n#else\n        device float *C = (static_buffer + meta_buffer[2]);\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n            int n = group_position.y * 64 + n_offset * 8;\n\n            for (int n_sub1 = 0; n_sub1 < 2; n_sub1++)\n            {\n                for (int n_sub2 = 0; n_sub2 < 4; n_sub2++)\n                {\n\n    #if OPTIMIZE && M_DIVIDABLE_BY_64\n                    (         n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n    #else\n                    (m < M && n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n    #endif\n                    n++;\n                }\n            }\n\n            m++;\n        }\n#endif\n\n    }\n\n#undef M_DIVIDABLE_BY_64\n#undef N_DIVIDABLE_BY_64\n#undef K_DIVIDABLE_BY_8\n#undef A_STRIDE_K\n#undef B_STRIDE_K\n#undef A_STRIDE_M\n#undef B_STRIDE_N\n}\n\n\nkernel void fusedelementwise_b22a70285e5b18ed204a93b5917390c8662403fdef065a8893bcc092(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    device float * v3 = (static_buffer + meta_buffer[2]);\n    const int v4 = meta_buffer[3];\n    const int v5 = meta_buffer[4];\n    const int D0 = meta_buffer[5];\n    const int D1 = meta_buffer[6];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v6 = v1[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v7 = v2[d0 + d1*v4];\n            float v8;\n            {\n                v8 = v7 + v6;\n            }\n            float v9;\n            {\n                const float slope = *((device float *)(&meta_buffer[7]));\n                v9 = v8 > 0 ? v8 : (v8 * slope);\n            }\n            float v10;\n            {\n                const float value = *((device float *)(&meta_buffer[8]));\n                v10 = v9 * value;\n            }\n            v3[d0*v5 + d1] = v10;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_032baaa9111c299e814f35400e3796df4bcc51cf48f69ed818c451f0(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    const device float * v4 = (static_buffer + meta_buffer[3]);\n    const device float * v5 = (static_buffer + meta_buffer[4]);\n    device float * v6 = (static_buffer + meta_buffer[5]);\n    const int v7 = meta_buffer[6];\n    const int v8 = meta_buffer[7];\n    const int v9 = meta_buffer[8];\n    const int v10 = meta_buffer[9];\n    const int v11 = meta_buffer[10];\n    const int D0 = meta_buffer[11];\n    const int D1 = meta_buffer[12];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v12 = v1[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v13 = v4[d0 + d1*v9];\n            const float v14 = v5[d0*v10 + d1];\n            float v15;\n            {\n                v15 = v13 + v14;\n            }\n            float v16;\n            {\n                v16 = v12 + v15;\n            }\n            const float v17 = v3[d0*v8 + d1];\n            float v18;\n            {\n                v18 = v16 > v17 ? 1.0 : 0.0;\n            }\n            float v19;\n            {\n                const float value = *((device float *)(&meta_buffer[13]));\n                v19 = v18 * value;\n            }\n            float v20;\n            {\n                const int value = meta_buffer[14];\n                v20 = v19 + value;\n            }\n            float v21;\n            {\n                v21 = v16 * v20;\n            }\n            float v22;\n            {\n                v22 = v21 + v18;\n            }\n            const float v23 = v2[d0*v7 + d1];\n            float v24;\n            {\n                v24 = v22 > v23 ? 1.0 : 0.0;\n            }\n            float v25;\n            {\n                v25 = v22 * v24;\n            }\n            float v26;\n            {\n                const float value = *((device float *)(&meta_buffer[15]));\n                v26 = v24 * value;\n            }\n            float v27;\n            {\n                const int value = meta_buffer[16];\n                v27 = v26 + value;\n            }\n            float v28;\n            {\n                v28 = v23 * v27;\n            }\n            float v29;\n            {\n                v29 = v25 + v28;\n            }\n            v6[d0 + d1*v11] = v29;\n        }\n    }\n}\n\n\nkernel void averagepooling2d_658cb762a97ad7134e3580a8bd76aacc680cc20968e2b81777940530(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint index[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float *X = (static_buffer + meta_buffer[0]);\n    device float *Y = (static_buffer + meta_buffer[1]);\n    const int N = meta_buffer[2];\n    const int H1 = meta_buffer[3];\n    const int W1 = meta_buffer[4];\n    const int C = meta_buffer[5];\n    const int H2 = meta_buffer[6];\n    const int W2 = meta_buffer[7];\n\n    const int KH = meta_buffer[8];\n    const int KW = meta_buffer[9];\n    const int SH = meta_buffer[10];\n    const int SW = meta_buffer[11];\n    const int PH = meta_buffer[12];\n    const int PW = meta_buffer[13];\n\n    for (int gid = index; gid < N * H2 * W2 * C; gid += num_threads) {\n        const int c = gid % C;\n        const int w2 = gid / C % W2;\n        const int h2 = gid / C / W2 % H2;\n        const int n = gid / C / W2 / H2;\n\n        float v = 0;\n        \n        for (int kh = 0; kh < KH; kh++) {\n            const int h1 = h2 * SH - PH + kh;\n            if (h1 < 0 || h1 >= H1) continue;\n\n            for (int kw = 0; kw < KW; kw++) {\n                const int w1 = w2 * SW - PW + kw;\n                if (w1 < 0 || w1 >= W1) continue;\n\n                v += X[((n * H1 + h1) * W1 + w1) * C + c];\n                \n            }\n        }\n        v /= KH * KW;\n\n        Y[gid] = v;\n    }\n}\n",
  "exec_infos": [
    {
      "entry_func_name": "reshape_16bccba9a464498806aabf37d42e7f652af6d3922196b61ef1ee5108",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        198,
        27,
        15,
        0,
        70,
        28,
        15,
        0,
        128,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "scalarmul_06508dfebccaa0291fc078f8d1d11ce3713bec2f10ba8883385e007c",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        70,
        28,
        15,
        0,
        198,
        28,
        15,
        0,
        128,
        0,
        0,
        0,
        0,
        0,
        0,
        61
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_9b539f2f74232353e897aa9134c69cfa1ee49d2b6fa3daf025ab98c3",
      "threadgroups_per_grid": {
        "width": 49,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        198,
        28,
        15,
        0,
        70,
        29,
        15,
        0,
        1,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "tensordot_8d766979cae5f29c01864384bf3bb8b079fcad4e7542a36c6fc3f956",
      "threadgroups_per_grid": {
        "width": 1,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        70,
        29,
        15,
        0,
        0,
        0,
        0,
        0,
        70,
        157,
        15,
        0,
        16,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        8,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_873fb3d3d4d2589d1d055d2ea220ae42b62d1e03b01854ef5b7f6b9f",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        0,
        0,
        2,
        0,
        70,
        157,
        15,
        0,
        70,
        161,
        15,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        205,
        204,
        76,
        62,
        239,
        91,
        113,
        61
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_9b539f2f74232353e897aa9134c69cfa1ee49d2b6fa3daf025ab98c3",
      "threadgroups_per_grid": {
        "width": 36,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        70,
        161,
        15,
        0,
        70,
        165,
        15,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "tensordot_8d766979cae5f29c01864384bf3bb8b079fcad4e7542a36c6fc3f956",
      "threadgroups_per_grid": {
        "width": 1,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        70,
        165,
        15,
        0,
        64,
        0,
        2,
        0,
        70,
        201,
        15,
        0,
        16,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "elementwiseadd_620a5dcfd600589f7c0e4c88e4b95c04f506b4492189eedef9605ad8",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        144,
        2,
        0,
        70,
        201,
        15,
        0,
        70,
        205,
        15,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "scalarpow_696465a8cc56f6719742be9898be20dc5761788dc945fd3b0257aa96",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        70,
        205,
        15,
        0,
        70,
        209,
        15,
        0,
        0,
        4,
        0,
        0,
        0,
        0,
        0,
        64
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sum_62f710ed23f4414bbcf18742b16328d4b2413c34d5186416604604a5",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        70,
        209,
        15,
        0,
        70,
        213,
        15,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        0,
        4,
        0,
        0,
        16,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_8fcb7d309f7daaa8b239f427c5cf04fe568ebc477b8b04a12a5e256b",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        70,
        213,
        15,
        0,
        70,
        205,
        15,
        0,
        86,
        213,
        15,
        0,
        16,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        0,
        128,
        60,
        119,
        204,
        43,
        50,
        0,
        0,
        0,
        63,
        205,
        204,
        76,
        62
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "unpooling2d_0b56b02b3c2d5b9bccd4aad4ddcda29e98f0a8d1c12e07d06f39c912",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        86,
        213,
        15,
        0,
        86,
        217,
        15,
        0,
        1,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        8,
        0,
        0,
        0,
        8,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "scalarmul_06508dfebccaa0291fc078f8d1d11ce3713bec2f10ba8883385e007c",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        86,
        217,
        15,
        0,
        86,
        233,
        15,
        0,
        0,
        16,
        0,
        0,
        239,
        91,
        113,
        61
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_9b539f2f74232353e897aa9134c69cfa1ee49d2b6fa3daf025ab98c3",
      "threadgroups_per_grid": {
        "width": 100,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        86,
        233,
        15,
        0,
        86,
        249,
        15,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        8,
        0,
        0,
        0,
        8,
        0,
        0,
        0,
        8,
        0,
        0,
        0,
        8,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "tensordot_291ea7d32ad11e41e6bd4219499a657cb96247731a43990b62e2f287",
      "threadgroups_per_grid": {
        "width": 1,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        86,
        249,
        15,
        0,
        128,
        144,
        2,
        0,
        86,
        137,
        16,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "elementwiseadd_620a5dcfd600589f7c0e4c88e4b95c04f506b4492189eedef9605ad8",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        128,
        32,
        3,
        0,
        86,
        137,
        16,
        0,
        86,
        153,
        16,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "scalarpow_696465a8cc56f6719742be9898be20dc5761788dc945fd3b0257aa96",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        86,
        153,
        16,
        0,
        86,
        169,
        16,
        0,
        0,
        16,
        0,
        0,
        0,
        0,
        0,
        64
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sum_62f710ed23f4414bbcf18742b16328d4b2413c34d5186416604604a5",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        86,
        169,
        16,
        0,
        86,
        185,
        16,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        8,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        8,
        0,
        0,
        0,
        8,
        0,
        0,
        0,
        0,
        16,
        0,
        0,
        64,
        0,
        0,
        0,
        8,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_5d1162a37f46ff8f350a1877fe376a78186dbaafcbcc27a08b5cb1be",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        86,
        185,
        16,
        0,
        86,
        153,
        16,
        0,
        150,
        185,
        16,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        0,
        128,
        60,
        119,
        204,
        43,
        50,
        0,
        0,
        0,
        63,
        205,
        204,
        76,
        62,
        239,
        91,
        113,
        61
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_9b539f2f74232353e897aa9134c69cfa1ee49d2b6fa3daf025ab98c3",
      "threadgroups_per_grid": {
        "width": 100,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        150,
        185,
        16,
        0,
        150,
        201,
        16,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        8,
        0,
        0,
        0,
        8,
        0,
        0,
        0,
        8,
        0,
        0,
        0,
        8,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "tensordot_291ea7d32ad11e41e6bd4219499a657cb96247731a43990b62e2f287",
      "threadgroups_per_grid": {
        "width": 1,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        150,
        201,
        16,
        0,
        192,
        32,
        3,
        0,
        150,
        89,
        17,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "elementwiseadd_620a5dcfd600589f7c0e4c88e4b95c04f506b4492189eedef9605ad8",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        192,
        176,
        3,
        0,
        150,
        89,
        17,
        0,
        150,
        105,
        17,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "scalarpow_696465a8cc56f6719742be9898be20dc5761788dc945fd3b0257aa96",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        150,
        105,
        17,
        0,
        150,
        121,
        17,
        0,
        0,
        16,
        0,
        0,
        0,
        0,
        0,
        64
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sum_62f710ed23f4414bbcf18742b16328d4b2413c34d5186416604604a5",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        150,
        121,
        17,
        0,
        150,
        137,
        17,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        8,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        8,
        0,
        0,
        0,
        8,
        0,
        0,
        0,
        0,
        16,
        0,
        0,
        64,
        0,
        0,
        0,
        8,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_8fcb7d309f7daaa8b239f427c5cf04fe568ebc477b8b04a12a5e256b",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        150,
        137,
        17,
        0,
        150,
        105,
        17,
        0,
        214,
        137,
        17,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        0,
        128,
        60,
        119,
        204,
        43,
        50,
        0,
        0,
        0,
        63,
        205,
        204,
        76,
        62
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "unpooling2d_0b56b02b3c2d5b9bccd4aad4ddcda29e98f0a8d1c12e07d06f39c912",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        137,
        17,
        0,
        214,
        153,
        17,
        0,
        1,
        0,
        0,
        0,
        8,
        0,
        0,
        0,
        8,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "scalarmul_06508dfebccaa0291fc078f8d1d11ce3713bec2f10ba8883385e007c",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        153,
        17,
        0,
        214,
        217,
        17,
        0,
        0,
        64,
        0,
        0,
        239,
        91,
        113,
        61
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_9b539f2f74232353e897aa9134c69cfa1ee49d2b6fa3daf025ab98c3",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        217,
        17,
        0,
        214,
        25,
        18,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "tensordot_291ea7d32ad11e41e6bd4219499a657cb96247731a43990b62e2f287",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        25,
        18,
        0,
        0,
        177,
        3,
        0,
        214,
        89,
        20,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "elementwiseadd_620a5dcfd600589f7c0e4c88e4b95c04f506b4492189eedef9605ad8",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        0,
        65,
        4,
        0,
        214,
        89,
        20,
        0,
        214,
        153,
        20,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "scalarpow_696465a8cc56f6719742be9898be20dc5761788dc945fd3b0257aa96",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        153,
        20,
        0,
        214,
        217,
        20,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        0,
        64
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sum_62f710ed23f4414bbcf18742b16328d4b2413c34d5186416604604a5",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        217,
        20,
        0,
        214,
        25,
        21,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        16,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        1,
        0,
        0,
        16,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_5d1162a37f46ff8f350a1877fe376a78186dbaafcbcc27a08b5cb1be",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        25,
        21,
        0,
        214,
        153,
        20,
        0,
        214,
        26,
        21,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        0,
        128,
        60,
        119,
        204,
        43,
        50,
        0,
        0,
        0,
        63,
        205,
        204,
        76,
        62,
        239,
        91,
        113,
        61
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_9b539f2f74232353e897aa9134c69cfa1ee49d2b6fa3daf025ab98c3",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        26,
        21,
        0,
        214,
        90,
        21,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "tensordot_291ea7d32ad11e41e6bd4219499a657cb96247731a43990b62e2f287",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        90,
        21,
        0,
        64,
        65,
        4,
        0,
        214,
        154,
        23,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "elementwiseadd_620a5dcfd600589f7c0e4c88e4b95c04f506b4492189eedef9605ad8",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        209,
        4,
        0,
        214,
        154,
        23,
        0,
        214,
        218,
        23,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "scalarpow_696465a8cc56f6719742be9898be20dc5761788dc945fd3b0257aa96",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        218,
        23,
        0,
        214,
        26,
        24,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        0,
        64
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sum_62f710ed23f4414bbcf18742b16328d4b2413c34d5186416604604a5",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        26,
        24,
        0,
        214,
        90,
        24,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        16,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        1,
        0,
        0,
        16,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_0c8bca748a43615bcc0e1a25ec31a2e87db264978e382cbf667342bc",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        218,
        23,
        0,
        214,
        90,
        24,
        0,
        214,
        91,
        24,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        0,
        128,
        60,
        119,
        204,
        43,
        50,
        0,
        0,
        0,
        63,
        205,
        204,
        76,
        62
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "unpooling2d_0b56b02b3c2d5b9bccd4aad4ddcda29e98f0a8d1c12e07d06f39c912",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        91,
        24,
        0,
        214,
        155,
        24,
        0,
        1,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "scalarmul_06508dfebccaa0291fc078f8d1d11ce3713bec2f10ba8883385e007c",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        155,
        24,
        0,
        214,
        155,
        25,
        0,
        0,
        0,
        1,
        0,
        239,
        91,
        113,
        61
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_9b539f2f74232353e897aa9134c69cfa1ee49d2b6fa3daf025ab98c3",
      "threadgroups_per_grid": {
        "width": 1156,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        155,
        25,
        0,
        214,
        155,
        26,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "tensordot_291ea7d32ad11e41e6bd4219499a657cb96247731a43990b62e2f287",
      "threadgroups_per_grid": {
        "width": 16,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        155,
        26,
        0,
        128,
        209,
        4,
        0,
        214,
        155,
        35,
        0,
        0,
        4,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "elementwiseadd_620a5dcfd600589f7c0e4c88e4b95c04f506b4492189eedef9605ad8",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        128,
        97,
        5,
        0,
        214,
        155,
        35,
        0,
        214,
        155,
        36,
        0,
        64,
        0,
        0,
        0,
        0,
        4,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        4,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "scalarpow_696465a8cc56f6719742be9898be20dc5761788dc945fd3b0257aa96",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        155,
        36,
        0,
        214,
        155,
        37,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        64
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sum_62f710ed23f4414bbcf18742b16328d4b2413c34d5186416604604a5",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        155,
        37,
        0,
        214,
        155,
        38,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        32,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        4,
        0,
        0,
        32,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_9a4b3c7e226ed709c8694fe7a713b6621becc90622cbc6a923a82aa9",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        155,
        36,
        0,
        214,
        155,
        38,
        0,
        214,
        159,
        38,
        0,
        0,
        4,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        4,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        0,
        128,
        60,
        119,
        204,
        43,
        50,
        0,
        0,
        0,
        63,
        205,
        204,
        76,
        62,
        239,
        91,
        113,
        61
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_9b539f2f74232353e897aa9134c69cfa1ee49d2b6fa3daf025ab98c3",
      "threadgroups_per_grid": {
        "width": 1156,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        159,
        38,
        0,
        214,
        159,
        39,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "tensordot_291ea7d32ad11e41e6bd4219499a657cb96247731a43990b62e2f287",
      "threadgroups_per_grid": {
        "width": 16,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        159,
        39,
        0,
        192,
        97,
        5,
        0,
        214,
        159,
        48,
        0,
        0,
        4,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "elementwiseadd_620a5dcfd600589f7c0e4c88e4b95c04f506b4492189eedef9605ad8",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        192,
        241,
        5,
        0,
        214,
        159,
        48,
        0,
        214,
        159,
        49,
        0,
        64,
        0,
        0,
        0,
        0,
        4,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        4,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "scalarpow_696465a8cc56f6719742be9898be20dc5761788dc945fd3b0257aa96",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        159,
        49,
        0,
        214,
        159,
        50,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        64
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sum_62f710ed23f4414bbcf18742b16328d4b2413c34d5186416604604a5",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        159,
        50,
        0,
        214,
        159,
        51,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        32,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        4,
        0,
        0,
        32,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_0c8bca748a43615bcc0e1a25ec31a2e87db264978e382cbf667342bc",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        159,
        49,
        0,
        214,
        159,
        51,
        0,
        214,
        163,
        51,
        0,
        0,
        4,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        4,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        0,
        128,
        60,
        119,
        204,
        43,
        50,
        0,
        0,
        0,
        63,
        205,
        204,
        76,
        62
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "unpooling2d_0b56b02b3c2d5b9bccd4aad4ddcda29e98f0a8d1c12e07d06f39c912",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        163,
        51,
        0,
        214,
        163,
        52,
        0,
        1,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "scalarmul_06508dfebccaa0291fc078f8d1d11ce3713bec2f10ba8883385e007c",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        163,
        52,
        0,
        214,
        163,
        56,
        0,
        0,
        0,
        4,
        0,
        239,
        91,
        113,
        61
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_9b539f2f74232353e897aa9134c69cfa1ee49d2b6fa3daf025ab98c3",
      "threadgroups_per_grid": {
        "width": 4356,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        163,
        56,
        0,
        214,
        163,
        60,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "tensordot_291ea7d32ad11e41e6bd4219499a657cb96247731a43990b62e2f287",
      "threadgroups_per_grid": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        163,
        60,
        0,
        0,
        242,
        5,
        0,
        214,
        163,
        96,
        0,
        0,
        16,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "elementwiseadd_620a5dcfd600589f7c0e4c88e4b95c04f506b4492189eedef9605ad8",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        0,
        130,
        6,
        0,
        214,
        163,
        96,
        0,
        214,
        163,
        100,
        0,
        64,
        0,
        0,
        0,
        0,
        16,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        16,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "scalarpow_696465a8cc56f6719742be9898be20dc5761788dc945fd3b0257aa96",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        163,
        100,
        0,
        214,
        163,
        104,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        0,
        64
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sum_62f710ed23f4414bbcf18742b16328d4b2413c34d5186416604604a5",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        163,
        104,
        0,
        214,
        163,
        108,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        64,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        0,
        4,
        0,
        0,
        16,
        0,
        0,
        64,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_9a4b3c7e226ed709c8694fe7a713b6621becc90622cbc6a923a82aa9",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        163,
        100,
        0,
        214,
        163,
        108,
        0,
        214,
        179,
        108,
        0,
        0,
        16,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        16,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        0,
        128,
        60,
        119,
        204,
        43,
        50,
        0,
        0,
        0,
        63,
        205,
        204,
        76,
        62,
        239,
        91,
        113,
        61
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_9b539f2f74232353e897aa9134c69cfa1ee49d2b6fa3daf025ab98c3",
      "threadgroups_per_grid": {
        "width": 4356,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        179,
        108,
        0,
        214,
        179,
        112,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "tensordot_291ea7d32ad11e41e6bd4219499a657cb96247731a43990b62e2f287",
      "threadgroups_per_grid": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        179,
        112,
        0,
        64,
        130,
        6,
        0,
        214,
        179,
        148,
        0,
        0,
        16,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "elementwiseadd_620a5dcfd600589f7c0e4c88e4b95c04f506b4492189eedef9605ad8",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        18,
        7,
        0,
        214,
        179,
        148,
        0,
        214,
        179,
        152,
        0,
        64,
        0,
        0,
        0,
        0,
        16,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        16,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "scalarpow_696465a8cc56f6719742be9898be20dc5761788dc945fd3b0257aa96",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        179,
        152,
        0,
        214,
        179,
        156,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        0,
        64
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sum_62f710ed23f4414bbcf18742b16328d4b2413c34d5186416604604a5",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        179,
        156,
        0,
        214,
        179,
        160,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        64,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        0,
        4,
        0,
        0,
        16,
        0,
        0,
        64,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_0c8bca748a43615bcc0e1a25ec31a2e87db264978e382cbf667342bc",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        179,
        152,
        0,
        214,
        179,
        160,
        0,
        214,
        195,
        160,
        0,
        0,
        16,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        16,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        0,
        128,
        60,
        119,
        204,
        43,
        50,
        0,
        0,
        0,
        63,
        205,
        204,
        76,
        62
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "unpooling2d_0b56b02b3c2d5b9bccd4aad4ddcda29e98f0a8d1c12e07d06f39c912",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        195,
        160,
        0,
        214,
        195,
        164,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "scalarmul_06508dfebccaa0291fc078f8d1d11ce3713bec2f10ba8883385e007c",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        195,
        164,
        0,
        214,
        195,
        180,
        0,
        0,
        0,
        16,
        0,
        239,
        91,
        113,
        61
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_9b539f2f74232353e897aa9134c69cfa1ee49d2b6fa3daf025ab98c3",
      "threadgroups_per_grid": {
        "width": 16900,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        195,
        180,
        0,
        214,
        195,
        196,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "tensordot_291ea7d32ad11e41e6bd4219499a657cb96247731a43990b62e2f287",
      "threadgroups_per_grid": {
        "width": 256,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        195,
        196,
        0,
        128,
        18,
        7,
        0,
        214,
        195,
        84,
        1,
        0,
        64,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "elementwiseadd_620a5dcfd600589f7c0e4c88e4b95c04f506b4492189eedef9605ad8",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        128,
        162,
        7,
        0,
        214,
        195,
        84,
        1,
        214,
        195,
        100,
        1,
        64,
        0,
        0,
        0,
        0,
        64,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        64,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "scalarpow_696465a8cc56f6719742be9898be20dc5761788dc945fd3b0257aa96",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        195,
        100,
        1,
        214,
        195,
        116,
        1,
        0,
        0,
        16,
        0,
        0,
        0,
        0,
        64
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sum_62f710ed23f4414bbcf18742b16328d4b2413c34d5186416604604a5",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        195,
        116,
        1,
        214,
        195,
        132,
        1,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        128,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        0,
        0,
        16,
        0,
        0,
        64,
        0,
        0,
        128,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_9a4b3c7e226ed709c8694fe7a713b6621becc90622cbc6a923a82aa9",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        195,
        100,
        1,
        214,
        195,
        132,
        1,
        214,
        3,
        133,
        1,
        0,
        64,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        64,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        0,
        128,
        60,
        119,
        204,
        43,
        50,
        0,
        0,
        0,
        63,
        205,
        204,
        76,
        62,
        239,
        91,
        113,
        61
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_9b539f2f74232353e897aa9134c69cfa1ee49d2b6fa3daf025ab98c3",
      "threadgroups_per_grid": {
        "width": 16900,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        3,
        133,
        1,
        214,
        3,
        149,
        1,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "tensordot_291ea7d32ad11e41e6bd4219499a657cb96247731a43990b62e2f287",
      "threadgroups_per_grid": {
        "width": 256,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        3,
        149,
        1,
        192,
        162,
        7,
        0,
        214,
        3,
        37,
        2,
        0,
        64,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "elementwiseadd_620a5dcfd600589f7c0e4c88e4b95c04f506b4492189eedef9605ad8",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        192,
        50,
        8,
        0,
        214,
        3,
        37,
        2,
        214,
        3,
        53,
        2,
        64,
        0,
        0,
        0,
        0,
        64,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        64,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "scalarpow_696465a8cc56f6719742be9898be20dc5761788dc945fd3b0257aa96",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        3,
        53,
        2,
        214,
        3,
        69,
        2,
        0,
        0,
        16,
        0,
        0,
        0,
        0,
        64
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sum_62f710ed23f4414bbcf18742b16328d4b2413c34d5186416604604a5",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        3,
        69,
        2,
        214,
        3,
        85,
        2,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        128,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        0,
        0,
        16,
        0,
        0,
        64,
        0,
        0,
        128,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_24dda3c48fc3b2fc196dcbc279a7d3ea5489513a005bb602db755a27",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        3,
        53,
        2,
        214,
        3,
        85,
        2,
        214,
        67,
        85,
        2,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        0,
        128,
        60,
        119,
        204,
        43,
        50,
        0,
        0,
        0,
        63,
        205,
        204,
        76,
        62,
        243,
        4,
        53,
        62
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "tensordot_488954f1cb868fb263cb3fa8afa4357054169df3d2df0ca624f30099",
      "threadgroups_per_grid": {
        "width": 256,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        67,
        85,
        2,
        0,
        51,
        8,
        0,
        214,
        67,
        101,
        2,
        0,
        64,
        0,
        0,
        3,
        0,
        0,
        0,
        64,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_e05a27890b9d9f3aa8c0be8de5871ebe2f3c64852c460f2ca6b8ca27",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        192,
        243,
        8,
        0,
        192,
        51,
        8,
        0,
        214,
        67,
        101,
        2,
        214,
        3,
        102,
        2,
        0,
        64,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        128,
        191,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "unpooling2d_0b56b02b3c2d5b9bccd4aad4ddcda29e98f0a8d1c12e07d06f39c912",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        3,
        102,
        2,
        214,
        195,
        102,
        2,
        1,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "transpose_1a0fbadea0475062956fc679399ce2f40129cb877aec049982efb309",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        195,
        102,
        2,
        214,
        195,
        105,
        2,
        3,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        3,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "scalarmul_ad03c6307fb13122823fcc851ec95814f1785ffc9d07db83096af8a0",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        195,
        105,
        2,
        214,
        195,
        108,
        2,
        0,
        0,
        1,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        72,
        89,
        139,
        62
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_9b539f2f74232353e897aa9134c69cfa1ee49d2b6fa3daf025ab98c3",
      "threadgroups_per_grid": {
        "width": 66564,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        195,
        108,
        2,
        214,
        195,
        111,
        2,
        1,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "tensordot_9d895cd7f9fb7f03b33f81c62b72615e90d48dc2748ce9a7d0fe1490",
      "threadgroups_per_grid": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        195,
        111,
        2,
        195,
        243,
        8,
        0,
        214,
        195,
        138,
        2,
        0,
        0,
        1,
        0,
        32,
        0,
        0,
        0,
        27,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_873fb3d3d4d2589d1d055d2ea220ae42b62d1e03b01854ef5b7f6b9f",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        35,
        247,
        8,
        0,
        214,
        195,
        138,
        2,
        214,
        195,
        170,
        2,
        32,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        205,
        204,
        76,
        62,
        171,
        170,
        170,
        61
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_9b539f2f74232353e897aa9134c69cfa1ee49d2b6fa3daf025ab98c3",
      "threadgroups_per_grid": {
        "width": 66564,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        195,
        170,
        2,
        214,
        195,
        202,
        2,
        1,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "tensordot_488954f1cb868fb263cb3fa8afa4357054169df3d2df0ca624f30099",
      "threadgroups_per_grid": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        195,
        202,
        2,
        67,
        247,
        8,
        0,
        214,
        195,
        234,
        3,
        0,
        0,
        1,
        0,
        32,
        0,
        0,
        0,
        32,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_b22a70285e5b18ed204a93b5917390c8662403fdef065a8893bcc092",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        67,
        27,
        9,
        0,
        214,
        195,
        234,
        3,
        214,
        195,
        10,
        4,
        32,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        32,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        205,
        204,
        76,
        62,
        0,
        0,
        128,
        62
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "tensordot_488954f1cb868fb263cb3fa8afa4357054169df3d2df0ca624f30099",
      "threadgroups_per_grid": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        195,
        10,
        4,
        99,
        27,
        9,
        0,
        214,
        195,
        42,
        4,
        0,
        0,
        1,
        0,
        3,
        0,
        0,
        0,
        32,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_032baaa9111c299e814f35400e3796df4bcc51cf48f69ed818c451f0",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        195,
        27,
        15,
        0,
        195,
        27,
        9,
        0,
        195,
        27,
        12,
        0,
        214,
        195,
        42,
        4,
        214,
        195,
        105,
        2,
        214,
        195,
        45,
        4,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        3,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        128,
        191,
        1,
        0,
        0,
        0,
        0,
        0,
        128,
        191,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "averagepooling2d_658cb762a97ad7134e3580a8bd76aacc680cc20968e2b81777940530",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        195,
        45,
        4,
        214,
        195,
        48,
        4,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        3,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        128,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "transpose_1a0fbadea0475062956fc679399ce2f40129cb877aec049982efb309",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        214,
        195,
        48,
        4,
        214,
        67,
        50,
        4,
        3,
        0,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        0,
        0,
        3,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    }
  ],
  "weight_encoding": "raw",
  "memory_layout": {
    "static": {
      "size": 70501334,
      "allocations": {
        "a36": {
          "name": "a36",
          "offset": 990150,
          "size": 128
        },
        "a38": {
          "name": "a38",
          "offset": 990278,
          "size": 128
        },
        "a39": {
          "name": "a39",
          "offset": 990406,
          "size": 128
        },
        "a40": {
          "name": "a40",
          "offset": 990534,
          "size": 32768
        },
        "a41": {
          "name": "a41",
          "offset": 1023302,
          "size": 1024
        },
        "a42": {
          "name": "a42",
          "offset": 1024326,
          "size": 1024
        },
        "a43": {
          "name": "a43",
          "offset": 1025350,
          "size": 9216
        },
        "a44": {
          "name": "a44",
          "offset": 1034566,
          "size": 1024
        },
        "a45": {
          "name": "a45",
          "offset": 1035590,
          "size": 1024
        },
        "a46": {
          "name": "a46",
          "offset": 1036614,
          "size": 1024
        },
        "a47": {
          "name": "a47",
          "offset": 1037638,
          "size": 16
        },
        "a48": {
          "name": "a48",
          "offset": 1037654,
          "size": 1024
        },
        "a49": {
          "name": "a49",
          "offset": 1038678,
          "size": 4096
        },
        "a50": {
          "name": "a50",
          "offset": 1042774,
          "size": 4096
        },
        "a51": {
          "name": "a51",
          "offset": 1046870,
          "size": 36864
        },
        "a52": {
          "name": "a52",
          "offset": 1083734,
          "size": 4096
        },
        "a53": {
          "name": "a53",
          "offset": 1087830,
          "size": 4096
        },
        "a54": {
          "name": "a54",
          "offset": 1091926,
          "size": 4096
        },
        "a55": {
          "name": "a55",
          "offset": 1096022,
          "size": 64
        },
        "a56": {
          "name": "a56",
          "offset": 1096086,
          "size": 4096
        },
        "a57": {
          "name": "a57",
          "offset": 1100182,
          "size": 36864
        },
        "a58": {
          "name": "a58",
          "offset": 1137046,
          "size": 4096
        },
        "a59": {
          "name": "a59",
          "offset": 1141142,
          "size": 4096
        },
        "a60": {
          "name": "a60",
          "offset": 1145238,
          "size": 4096
        },
        "a61": {
          "name": "a61",
          "offset": 1149334,
          "size": 64
        },
        "a62": {
          "name": "a62",
          "offset": 1149398,
          "size": 4096
        },
        "a63": {
          "name": "a63",
          "offset": 1153494,
          "size": 16384
        },
        "a64": {
          "name": "a64",
          "offset": 1169878,
          "size": 16384
        },
        "a65": {
          "name": "a65",
          "offset": 1186262,
          "size": 147456
        },
        "a66": {
          "name": "a66",
          "offset": 1333718,
          "size": 16384
        },
        "a67": {
          "name": "a67",
          "offset": 1350102,
          "size": 16384
        },
        "a68": {
          "name": "a68",
          "offset": 1366486,
          "size": 16384
        },
        "a69": {
          "name": "a69",
          "offset": 1382870,
          "size": 256
        },
        "a70": {
          "name": "a70",
          "offset": 1383126,
          "size": 16384
        },
        "a71": {
          "name": "a71",
          "offset": 1399510,
          "size": 147456
        },
        "a72": {
          "name": "a72",
          "offset": 1546966,
          "size": 16384
        },
        "a73": {
          "name": "a73",
          "offset": 1563350,
          "size": 16384
        },
        "a74": {
          "name": "a74",
          "offset": 1579734,
          "size": 16384
        },
        "a75": {
          "name": "a75",
          "offset": 1596118,
          "size": 256
        },
        "a76": {
          "name": "a76",
          "offset": 1596374,
          "size": 16384
        },
        "a77": {
          "name": "a77",
          "offset": 1612758,
          "size": 65536
        },
        "a78": {
          "name": "a78",
          "offset": 1678294,
          "size": 65536
        },
        "a79": {
          "name": "a79",
          "offset": 1743830,
          "size": 589824
        },
        "a80": {
          "name": "a80",
          "offset": 2333654,
          "size": 65536
        },
        "a81": {
          "name": "a81",
          "offset": 2399190,
          "size": 65536
        },
        "a82": {
          "name": "a82",
          "offset": 2464726,
          "size": 65536
        },
        "a83": {
          "name": "a83",
          "offset": 2530262,
          "size": 1024
        },
        "a84": {
          "name": "a84",
          "offset": 2531286,
          "size": 65536
        },
        "a85": {
          "name": "a85",
          "offset": 2596822,
          "size": 589824
        },
        "a86": {
          "name": "a86",
          "offset": 3186646,
          "size": 65536
        },
        "a87": {
          "name": "a87",
          "offset": 3252182,
          "size": 65536
        },
        "a88": {
          "name": "a88",
          "offset": 3317718,
          "size": 65536
        },
        "a89": {
          "name": "a89",
          "offset": 3383254,
          "size": 1024
        },
        "a90": {
          "name": "a90",
          "offset": 3384278,
          "size": 65536
        },
        "a91": {
          "name": "a91",
          "offset": 3449814,
          "size": 262144
        },
        "a92": {
          "name": "a92",
          "offset": 3711958,
          "size": 262144
        },
        "a93": {
          "name": "a93",
          "offset": 3974102,
          "size": 2359296
        },
        "a94": {
          "name": "a94",
          "offset": 6333398,
          "size": 262144
        },
        "a95": {
          "name": "a95",
          "offset": 6595542,
          "size": 262144
        },
        "a96": {
          "name": "a96",
          "offset": 6857686,
          "size": 262144
        },
        "a97": {
          "name": "a97",
          "offset": 7119830,
          "size": 4096
        },
        "a98": {
          "name": "a98",
          "offset": 7123926,
          "size": 262144
        },
        "a99": {
          "name": "a99",
          "offset": 7386070,
          "size": 2359296
        },
        "a100": {
          "name": "a100",
          "offset": 9745366,
          "size": 262144
        },
        "a101": {
          "name": "a101",
          "offset": 10007510,
          "size": 262144
        },
        "a102": {
          "name": "a102",
          "offset": 10269654,
          "size": 262144
        },
        "a103": {
          "name": "a103",
          "offset": 10531798,
          "size": 4096
        },
        "a104": {
          "name": "a104",
          "offset": 10535894,
          "size": 262144
        },
        "a105": {
          "name": "a105",
          "offset": 10798038,
          "size": 1048576
        },
        "a106": {
          "name": "a106",
          "offset": 11846614,
          "size": 1048576
        },
        "a107": {
          "name": "a107",
          "offset": 12895190,
          "size": 9437184
        },
        "a108": {
          "name": "a108",
          "offset": 22332374,
          "size": 1048576
        },
        "a109": {
          "name": "a109",
          "offset": 23380950,
          "size": 1048576
        },
        "a110": {
          "name": "a110",
          "offset": 24429526,
          "size": 1048576
        },
        "a111": {
          "name": "a111",
          "offset": 25478102,
          "size": 16384
        },
        "a112": {
          "name": "a112",
          "offset": 25494486,
          "size": 1048576
        },
        "a113": {
          "name": "a113",
          "offset": 26543062,
          "size": 9437184
        },
        "a114": {
          "name": "a114",
          "offset": 35980246,
          "size": 1048576
        },
        "a115": {
          "name": "a115",
          "offset": 37028822,
          "size": 1048576
        },
        "a116": {
          "name": "a116",
          "offset": 38077398,
          "size": 1048576
        },
        "a117": {
          "name": "a117",
          "offset": 39125974,
          "size": 16384
        },
        "a118": {
          "name": "a118",
          "offset": 39142358,
          "size": 1048576
        },
        "a119": {
          "name": "a119",
          "offset": 40190934,
          "size": 49152
        },
        "a120": {
          "name": "a120",
          "offset": 40240086,
          "size": 49152
        },
        "a121": {
          "name": "a121",
          "offset": 40289238,
          "size": 196608
        },
        "a122": {
          "name": "a122",
          "offset": 40485846,
          "size": 196608
        },
        "a123": {
          "name": "a123",
          "offset": 40682454,
          "size": 196608
        },
        "a124": {
          "name": "a124",
          "offset": 40879062,
          "size": 1769472
        },
        "a125": {
          "name": "a125",
          "offset": 42648534,
          "size": 2097152
        },
        "a126": {
          "name": "a126",
          "offset": 44745686,
          "size": 2097152
        },
        "a127": {
          "name": "a127",
          "offset": 46842838,
          "size": 18874368
        },
        "a128": {
          "name": "a128",
          "offset": 65717206,
          "size": 2097152
        },
        "a129": {
          "name": "a129",
          "offset": 67814358,
          "size": 2097152
        },
        "a130": {
          "name": "a130",
          "offset": 69911510,
          "size": 196608
        },
        "a131": {
          "name": "a131",
          "offset": 70108118,
          "size": 196608
        },
        "a132": {
          "name": "a132",
          "offset": 70304726,
          "size": 98304
        },
        "a37": {
          "name": "a37",
          "offset": 70403030,
          "size": 98304
        },
        "a1": {
          "name": "a1",
          "offset": 0,
          "size": 131072
        },
        "a2": {
          "name": "a2",
          "offset": 131072,
          "size": 64
        },
        "a3": {
          "name": "a3",
          "offset": 131136,
          "size": 36864
        },
        "a4": {
          "name": "a4",
          "offset": 168000,
          "size": 64
        },
        "a5": {
          "name": "a5",
          "offset": 168064,
          "size": 36864
        },
        "a6": {
          "name": "a6",
          "offset": 204928,
          "size": 64
        },
        "a7": {
          "name": "a7",
          "offset": 204992,
          "size": 36864
        },
        "a8": {
          "name": "a8",
          "offset": 241856,
          "size": 64
        },
        "a9": {
          "name": "a9",
          "offset": 241920,
          "size": 36864
        },
        "a10": {
          "name": "a10",
          "offset": 278784,
          "size": 64
        },
        "a11": {
          "name": "a11",
          "offset": 278848,
          "size": 36864
        },
        "a12": {
          "name": "a12",
          "offset": 315712,
          "size": 64
        },
        "a13": {
          "name": "a13",
          "offset": 315776,
          "size": 36864
        },
        "a14": {
          "name": "a14",
          "offset": 352640,
          "size": 64
        },
        "a15": {
          "name": "a15",
          "offset": 352704,
          "size": 36864
        },
        "a16": {
          "name": "a16",
          "offset": 389568,
          "size": 64
        },
        "a17": {
          "name": "a17",
          "offset": 389632,
          "size": 36864
        },
        "a18": {
          "name": "a18",
          "offset": 426496,
          "size": 64
        },
        "a19": {
          "name": "a19",
          "offset": 426560,
          "size": 36864
        },
        "a20": {
          "name": "a20",
          "offset": 463424,
          "size": 64
        },
        "a21": {
          "name": "a21",
          "offset": 463488,
          "size": 36864
        },
        "a22": {
          "name": "a22",
          "offset": 500352,
          "size": 64
        },
        "a23": {
          "name": "a23",
          "offset": 500416,
          "size": 36864
        },
        "a24": {
          "name": "a24",
          "offset": 537280,
          "size": 64
        },
        "a25": {
          "name": "a25",
          "offset": 537344,
          "size": 192
        },
        "a26": {
          "name": "a26",
          "offset": 537536,
          "size": 49152
        },
        "a27": {
          "name": "a27",
          "offset": 586688,
          "size": 3
        },
        "a28": {
          "name": "a28",
          "offset": 586691,
          "size": 864
        },
        "a29": {
          "name": "a29",
          "offset": 587555,
          "size": 32
        },
        "a30": {
          "name": "a30",
          "offset": 587587,
          "size": 9216
        },
        "a31": {
          "name": "a31",
          "offset": 596803,
          "size": 32
        },
        "a32": {
          "name": "a32",
          "offset": 596835,
          "size": 96
        },
        "a33": {
          "name": "a33",
          "offset": 596931,
          "size": 196608
        },
        "a34": {
          "name": "a34",
          "offset": 793539,
          "size": 196608
        },
        "a35": {
          "name": "a35",
          "offset": 990147,
          "size": 3
        }
      }
    },
    "dynamic": {
      "size": 0,
      "allocations": {}
    }
  },
  "placeholders": {
    "__MAX_THREADS_PER_THREADGROUP__": null
  },
  "inputs": [
    "a36"
  ],
  "outputs": [
    "a37"
  ],
  "licenses": {
    "webdnn": "(C) Machine Intelligence Laboratory (The University of Tokyo), MIT License"
  }
}